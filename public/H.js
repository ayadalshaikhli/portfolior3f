/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import { useGLTF, useAnimations } from '@react-three/drei'
import React, { Suspense, useRef, useState, useEffect } from "react";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import { useControls } from 'leva'
import {
  CubeCamera,
  Environment,
  Html,
  MeshReflectorMaterial,
  PerspectiveCamera,
  useGLTF,
  useAnimations,
  Text,
  ScrollControls,
  Scroll,
  Image as ImageImpl,
  useScroll,
  useTexture
} from "@react-three/drei";
import * as THREE from "three";
import { gsap, Expo } from "gsap/dist/gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
gsap.registerPlugin(ScrollTrigger);
import { Physics, usePlane, useSphere } from "@react-three/cannon";
import { EffectComposer, SSAO, Bloom } from "@react-three/postprocessing";
import { LayerMaterial, Depth, Noise,  Fresnel } from "lamina";

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/h.glb')
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Plane002" position={[0, 0.69, -12.01]} rotation={[0, -Math.PI / 2, 0]}>
          <mesh name="Plane003_1" geometry={nodes.Plane003_1.geometry} material={materials.WALL} />
          <mesh name="Plane003_2" geometry={nodes.Plane003_2.geometry} material={materials.FLOOR} />
        </group>
        <mesh name="Plane" geometry={nodes.Plane.geometry} material={materials.FLOOR} />
        <mesh name="Plane003" geometry={nodes.Plane003.geometry} material={materials.WATER} position={[0, 0.01, 0]} />
        <mesh name="Cube003" geometry={nodes.Cube003.geometry} material={materials.WALL} position={[0, 0, -7.83]} scale={0.69} />
        <mesh name="Cube004" geometry={nodes.Cube004.geometry} material={materials.WALL} position={[-7.62, 0, -13.11]} scale={0.69} />
        <mesh name="Cube006" geometry={nodes.Cube006.geometry} material={materials.WALL} position={[0, 0.59, -6.35]} scale={0.69} />
        <mesh name="Cube009" geometry={nodes.Cube009.geometry} material={materials.WALL} position={[0, 0, -43.55]} />
        <mesh name="Cube011" geometry={nodes.Cube011.geometry} material={materials.WALL} position={[0, 6.23, 17.73]} scale={0.69} />
        <mesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.WALL} position={[0, 8.2, -36.38]} />
      </group>
    </group>
  )
}

useGLTF.preload('/h.glb')



const Lights = () => {
  return (
    <>
      <ambientLight intensity={0.5} />
      <directionalLight position={[-10, -10, -5]} intensity={0.5} />
      <directionalLight
        castShadow
        intensity={1}
        position={[50, 50, 25]}
        shadow-mapSize={[256, 256]}
        shadow-camera-left={-10}
        shadow-camera-right={10}
        shadow-camera-top={10}
        shadow-camera-bottom={-10}
      />
    </>
  );
};

























export default function Mark() {
  return (
    <>
      <Canvas
        style={{
          width: "100vw",
          height: "100vh",
          position: "relative",
          overflow: "hidden",
          backgroundColor: "#0E1012",
          
        }}
        id="main-canvas"
        shadows
        gl={{ stencil: false, antialias: false }}
        camera={{ position: [0, 0, 20], fov: 20, near: 17, far: 20 }}
      >
        <Lights />
        <Model/>

      </Canvas>
    </>
  );
}